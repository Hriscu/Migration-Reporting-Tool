#######################################################
# 
# RedditService.py
# Python implementation of the Class RedditService
# Generated by Enterprise Architect
# Created on:      12-Nov-2024 12:04:03 AM
# Original author: utilizator
# 
#######################################################
from datetime import datetime

import praw
from django.conf import settings

from api.data.RedditComment import RedditComment
from api.data.DataPreprocessor import DataPreprocessor
from api.data.RedditCommentsRepository import RedditCommentsRepository
from api.data.RedditPostsRepository import RedditPostsRepository
from api.data.RedditPost import RedditPost


class RedditService:
    def __init__(self):
        self.repository = RedditPostsRepository()
        self.comments_repository = RedditCommentsRepository()
        self.preprocessor = DataPreprocessor()
        self.reddit = praw.Reddit(
            client_id=settings.REDDIT_CLIENT_ID,
            client_secret=settings.REDDIT_CLIENT_SECRET,
            user_agent=settings.REDDIT_USER_AGENT
        )

    def fetch_and_save_comments(self, post_id):
        post = self.reddit.submission(id=post_id)
        post.comments.replace_more(limit=10)
        count = 0

        for comment in post.comments.list():
            comment_data = {
                "comment_id": comment.id,
                "post_id": post_id,
                "text": self.preprocessor.preprocess_post(comment.body),
                "created_at": datetime.fromtimestamp(comment.created_utc),
                "score": comment.score,
                "is_submitter": comment.is_submitter
            }
            self.comments_repository.save(RedditComment.from_dict(comment_data))

            count = count + 1

            if count >= 50:
                break

    def fetch_and_save_posts(self, subreddit_name="politics", limit=10):
        subreddit = self.reddit.subreddit(subreddit_name)
        for post in subreddit.hot(limit=limit):
            post_data = {
                "post_id": post.id,
                "title": post.title,
                "text": self.preprocessor.preprocess_post(post.selftext) if post.is_self else None,
                "subreddit": post.subreddit.display_name,
                "created_at": datetime.fromtimestamp(post.created_utc),
                "score": post.score,
                "num_comments": post.num_comments,
                "is_self": post.is_self,
                "url": post.url
            }
            self.repository.save(RedditPost.from_dict(post_data))
            self.fetch_and_save_comments(post_data["post_id"])
